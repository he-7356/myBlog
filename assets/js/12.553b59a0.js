(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{373:function(t,n,v){"use strict";v.r(n);var _=v(45),i=Object(_.a)({},(function(){var t=this,n=t.$createElement,v=t._self._c||n;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("Boxx"),t._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul")]),v("p"),t._v(" "),v("h2",[t._v("git常用指令")]),t._v(" "),v("p",[t._v("1、git显示全部分支")]),t._v(" "),v("p",[t._v("git branch //显示本地分支\ngit branch -a //显示远程分支\n2、git创建分支")]),t._v(" "),v("p",[t._v("git branch 分支名\n3、切换分支")]),t._v(" "),v("p",[t._v("git checkout 分支名\ngit checkout -b 分支名 若分支不存在，则创建它\n4、删除分支")]),t._v(" "),v("p",[t._v("git branch -d 分支名\n-d 当分支已经合并到主干后删除\n-D无论如何都删除分支\n5、合并分支")]),t._v(" "),v("p",[t._v("git merge 分支名\n6、撤销前一次commit")]),t._v(" "),v("p",[t._v("git revert HEAD\n7、撤销所有本地修改")]),t._v(" "),v("p",[t._v("git reset --hard")]),t._v(" "),v("p",[t._v("8、撤销所有本地到上一次修改")]),t._v(" "),v("p",[t._v("git reset --hard HEAD^")]),t._v(" "),v("p",[t._v("9、撤销上一次commit，将commit的文件撤回暂存区")]),t._v(" "),v("p",[t._v("git reset --soft HEAD^")]),t._v(" "),v("p",[t._v("要是想撤销到上上次，就是HEAD^^ ,以此类推。")]),t._v(" "),v("p",[t._v("git revert 是撤销某次操作，此次操作之前的commit都会被保留")]),t._v(" "),v("p",[t._v("git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区")]),t._v(" "),v("p",[t._v("10、将此次更新文件并入到上次commit的记录中，不新添加commit")]),t._v(" "),v("p",[t._v("git commit -amend\n二、git进阶\n1、git tag")]),t._v(" "),v("p",[t._v("可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了，\n例如你可以使用\n'git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20'\n来标记这个被你还原的版本，那么以后你想查看该版本时，\n就可以使用 revert_version标签名，而不是哈希值了")]),t._v(" "),v("p",[t._v("2、git stash")]),t._v(" "),v("p",[t._v("把所有本地修改都放到暂存区\n3、git stash pop")]),t._v(" "),v("p",[t._v("把git stash放到暂存区的代码拿出来\ntips：")]),t._v(" "),v("p",[t._v("使用git stash保存当前的工作现场，\n那么就可以切换到其他分支进行工作，或者在当前分支上完成其他紧急的工作，\n比如修订一个bug测试提交。\n如果一个使用了一个")]),t._v(" "),v("p",[t._v("git stash，")]),t._v(" "),v("p",[t._v("切换到一个分支，\n且在该分支上的工作未完成也需要保存它的工作现场。再使用gitstash。那么stash 队列中就有了两个工作现场。\n可以使用")]),t._v(" "),v("p",[t._v("git stash list。  查看stash队列。")]),t._v(" "),v("p",[t._v("如果在一个分支上想要恢复某一个工作现场怎么办：\n先用")]),t._v(" "),v("p",[t._v("git stashlist\n查看stash队列")]),t._v(" "),v("p",[t._v("。确定要恢复哪个工作现场到当前分支。\n然后用")]),t._v(" "),v("p",[t._v("git stash pop stash@{num}。num就是你要恢复的工作现场的编号。\n如果想要清空stash队列则使用\ngit stash clear。")]),t._v(" "),v("p",[t._v("同时注意使用git stashpop命令是恢复\nstash队列中的stash@{0}即最上层的那个工作现场。\n而且使用pop命令恢复的工作现场，其对应的stash在队列中删除。\n使用git stash apply stash@{num}方法")]),t._v(" "),v("p",[t._v("除了不在stash队列删除外其他和git stashpop 完全一样。\n常见问题：\n1、提交合并失败\n查看源文件\n这里写图片描述")]),t._v(" "),v("p",[t._v("git迷惑之处在于它不知道是把hello world这行放在前面还是把报时功能这段放在前面。\n修改冲突\n这里写图片描述")]),t._v(" "),v("p",[t._v('重新提交\ngit commit -am "xxx"')]),t._v(" "),v("p",[t._v("2、解决gerrit冲突\n解决远程冲突：\ncd demo以分支为develop为例打开Gerrit有冲突的那个网址，如 http://192.168.1.33:8080/#/c/16/ 找到Download 如下命令，执行\ngit fetch ssh://minggui.li@192.168.1.33:29418/demo refs/changes/16/16/1 && git checkout FETCH_HEADgit checkout -b new_branch_namegit fetch origingit rebase origin/develop\n修改冲突文件\ngit add .git rebase --continuegit push origin new_branch_name:refs/for/developgit checkout developgit branch -D new_branch_name不会产生新的changes记录，")]),t._v(" "),v("p",[t._v("将原changes记录重新review提交即可，")]),t._v(" "),v("p",[t._v("这时在原冲突机器上直接pull会本地冲突，")]),t._v(" "),v("p",[t._v("需要git reset --hard HEAD^\n否则会出现\ncannot do a partial commit during a merge.最后更新下代码git pu")])],1)}),[],!1,null,null,null);n.default=i.exports}}]);