(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{371:function(v,_,t){"use strict";t.r(_);var p=t(45),i=Object(p.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("Boxx"),v._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul")]),t("p"),v._v(" "),t("h2",[v._v("git基础知识")]),v._v(" "),t("p",[v._v("我们废话不多说，直接来干货。")]),v._v(" "),t("p",[v._v("我们将会介绍以下几点：")]),v._v(" "),t("p",[v._v("一， 什么是 git")]),v._v(" "),t("p",[v._v("二，使用 git 的一般开发流程")]),v._v(" "),t("p",[v._v("三，快速安装新建项目")]),v._v(" "),t("p",[v._v("开始：")]),v._v(" "),t("p",[v._v("一，什么是 git。")]),v._v(" "),t("p",[v._v("阅读本文的前提是你知道或者用过至少一种源代码管理工具，比如：SVN, CVS 或者 TFS 等等。 你必须知道什么是源代码管理。如果这些都不满足。请直接跳过本文。")]),v._v(" "),t("p",[v._v("了解陌生事物的最好办法，是和已知事物类比。 ---孔子")]),v._v(" "),t("p",[v._v("我们以 svn 为例。 我们都知道传统的源代码管理都是以服务器为中心的：")]),v._v(" "),t("p",[v._v("每个开发者都直接连在中间服务器上， 本地修改，然后 commit 到 svn 服务器上。")]),v._v(" "),t("p",[v._v("这种做法看似完美，但是有致命的缺陷：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("开发者不能本地跟踪代码版本。 所有的信息都是在服务器上。 你把本地的代码改了很多，但是又不能提交。通常，本地只能缓存一个版本。对于小项目无所谓， 但是项目一复杂，人员多就麻烦了。 通常你本地的代码都全是红色的。自己都不知道今天修改了什么， 有哪些修改是真正应该提交给 svn 的。")])]),v._v(" "),t("li",[t("p",[v._v("因为第一点，一旦离开服务器， 程序猿将无法正常工作。 因为本地不能跟踪代码版本。 你的（几乎）任何操作都必须连上服务器。比如， show log， blame，show history 等等。")])]),v._v(" "),t("li",[t("p",[v._v("中央服务器压力过大。 因为每个人都必须把代码提交到服务器，并且做 daily build。")])]),v._v(" "),t("li",[t("p",[v._v("对于大型项目， svn 几乎不可用。 例如 linux 内核项目， 开发者何止几万？ 都直接提交给 svn 服务器的话还不乱套了。")])]),v._v(" "),t("li",[t("p",[v._v("对于个人的私人项目而言（或者对于小公司的项目）， 不用版本控制当然不行，但是为了用版本控制而专门架设 svn 服务器有有点舍不得。")])])]),v._v(" "),t("p",[v._v("有没有能解决上述几个问题的东东呢？ 恩， 答案是肯定的。")]),v._v(" "),t("p",[v._v("Linux 内核的作者也遇到了这些问题，于是他决定再一次改变世界， 重写一个可以本地使用的 svn。")]),v._v(" "),t("p",[v._v("对， 这就是 git。 分布式代码版本管理系统。（说人话 ：就是不用服务器的 svn）")]),v._v(" "),t("p",[v._v("我们来看 git 的结构：")]),v._v(" "),t("p",[v._v("git 没有中央服务器。 你装上 git 软件之后，你就可以指定本地的文件夹进行版本控制了。你可拔掉网线，然后在本地修改， commit，revert（rollback）， branch， restore， show log， blame， history 等等， 全部你之前在 svn 里面可以用的操作。 简单的说，你就完美了。")]),v._v(" "),t("p",[v._v("你可能意识到一个问题了。 就是天下大乱了。")]),v._v(" "),t("p",[v._v("每个人都自顾自的开发，怎么协作呢？ 恩，通常 git 比 svn 会多出两个操作， 就是 pull 和 push。")]),v._v(" "),t("p",[v._v("我们看一个复杂一点的图：")]),v._v(" "),t("p",[v._v("开发者之间通过 pull 和 push 操作， 把别人的修改拉过来，或者把自己的修改推给别人。")]),v._v(" "),t("p",[v._v("恩，你可能还是觉得有问题，我们生产 环境中， 以谁的代码为最终版本呢？")]),v._v(" "),t("p",[v._v("这个问题确实比较棘手，因为，从单纯的技术上讲，每个开发者的机器都是对等的。 没有主次之分。")]),v._v(" "),t("p",[v._v("我们还有办法：")]),v._v(" "),t("p",[v._v("技术上不能解决的问题，我们从制度上解决. ---- 孟子")]),v._v(" "),t("p",[v._v("从分布式环境中我们模拟出一个中心来：")]),v._v(" "),t("p",[v._v("我们引入 Leader 这个角色。 他的机器是最终版本。 每个开发者都必须把最终的修改版 push 给 leader。 leader 会 review 然后提交。他就是最终版本。")]),v._v(" "),t("p",[v._v("恩， 我们好像还漏掉一个大问题， 说 git，怎么漏掉了 github 呢。 github 是什么。")]),v._v(" "),t("p",[v._v("我们知道，如果每个人都本地修改的话，本地可能不安全，（硬盘坏了，笔记本被偷了。。。。）")]),v._v(" "),t("p",[v._v("我们可能需要一个安全的服务器来存储/备份代码。对于开源的项目，可能是需要一个地方分享你的代码，你不可能 24 小时开着笔记本，让别人从你这 pull 代码。")]),v._v(" "),t("p",[v._v("于是， 网上所谓的源代码托管网站就冒出来了。 github 就是这样的。")]),v._v(" "),t("p",[v._v("看这个图， 我只修改了其中一个地方， 就是把 leader 的机器换成了。 github.com 提供的在线账户。")]),v._v(" "),t("p",[v._v("所以, git 和 github 没有必然联系。")]),v._v(" "),t("p",[v._v("这里有几个常用的在线托管地址, 有兴趣自己看看：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("github.com， 大名鼎鼎。 免费，只支持开源项目， 不支持私有项目。")])]),v._v(" "),t("li",[t("p",[v._v("bitbucket.com ，同样大名鼎鼎。 免费， 支持开源项目和私有项目。 免费用户最多 5 个。项目无限。")])]),v._v(" "),t("li",[t("p",[v._v("git.oschina.net， 国内顶尖托管平台， 我本人正在用的就是这个。 支持开源项目和私有项目。 成员无限， 项目 1000 个。 使用的是阿里云服务器， 速度极快。 本人推荐 5 颗星。")])])]),v._v(" "),t("p",[v._v("二， git 开发的一般流程。")]),v._v(" "),t("p",[v._v("上面其实已经涉及了使用 git 的一般结构。 那么生产环境中， git 是如何应用的呢。")]),v._v(" "),t("p",[v._v("本人知道的模型如下：")]),v._v(" "),t("p",[v._v("每个开发者都向自己的项目服务器（leader）提交代码， leader 向公司服务器提交。 当然这个 leader 是可有可无的。如果项目小的话， 开发者可以直接向公司服务器提交。 公司的服务器就是最终版本。 一般公司还会有持续集成 CI 服务器。 我们可以在公司的源码服务器上设置 git 的 hook。 自动触发 CI 服务器工作。 这是后话，不多说了。")]),v._v(" "),t("p",[v._v("三， 前面的概念弄清楚之后， 上手就容易多了。 我们 helloworld。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("这是 git 的官网：http://git-scm.com/ 去下载 windows 客户端。")]),v._v(" "),t("p",[v._v("如果是 linux 的话， sudo apt-get install gitcore")])]),v._v(" "),t("li",[t("p",[v._v("注意， 官网的客户端都是命令行的。 命令行是高阶用法。不在这里说了。 我们下个 gui。")])])]),v._v(" "),t("p",[v._v("我用的是 TortoiseGit。 https://code.google.com/p/tortoisegit/ ， 大家恐怕都熟悉 svn 时代的乌龟爬。上手快。 我们下面的操作都是 gui 上的。")]),v._v(" "),t("p",[v._v("安装过程不说了。 一路 next。 我们跳过。 直接到最后。假设你现在已经安装完成了。")]),v._v(" "),t("p",[v._v("比如我已经有一个工程， helloworld：")]),v._v(" "),t("p",[v._v("这是工程文件的内部结构：")]),v._v(" "),t("p",[v._v("现在我们想让 helloworld 用上 git 怎么做呢， 在工程根目录下，点击鼠标右键。")]),v._v(" "),t("p",[v._v("选择 Create repository。")]),v._v(" "),t("p",[v._v("这个选项不要勾上。 稍后我们会解释什么是 Bare。")]),v._v(" "),t("p",[v._v("然后就完成了。")]),v._v(" "),t("p",[v._v("里面多出了一个 .git 目录。 当前的目录（及其所有子目录）已经在 git 的监视之中了。 但是当前的代码还没有添加到 git 的跟踪数据库中。 简单的说，git 还没有储存任何版本信息。 我们需要进行第一次提交：")]),v._v(" "),t("p",[v._v("git 默认你本地会有一个主分支 master。")]),v._v(" "),t("p",[v._v("我们写一些注释， 并且勾上想要添加到 git 的文件。 （如果有子目录的话， 它都会显示在这里。）")]),v._v(" "),t("p",[v._v("提交完成， close。 这个 push 按钮，稍后再说。")]),v._v(" "),t("p",[v._v("好了，这个时候我们在回到文件夹，看看有什么变化：")]),v._v(" "),t("p",[v._v("现在这些文件就添加进 git 了。")]),v._v(" "),t("p",[v._v("剩下的你就可以为所欲为了。 像 svn 一样，自己试试几个命令吧： 修改， difference， commit， revert，")]),v._v(" "),t("p",[v._v("到这你已经入门了。")]),v._v(" "),t("p",[v._v("最后我们来介绍两个重要的概念。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("“git 目录”, 就是指上图中，项目根目录下生成的 “.git” 文件夹。 用过 svn 的同学都知道， svn 有‘.svn’文件夹。 他们的作用差不多。 这里保存了 git 的本地数据库资料。就是所有的版本信息。 跟 svn 不一样的地方就是，git 中，只有根目录下有这个目录， 所有的子目录下都没有， 也就是每个工程只有一个.git 目录。")])]),v._v(" "),t("li",[t("p",[v._v("“git 工作目录”, 其实就是你的工程目录， 比如上图中的工程根目录：H:\\mycode\\helloworld\\ 。 为什么有这个工作目录呢。 就是你工作在这个目录下， 你可以修改编辑里面的文件，最后把修改提交给 git 目录。 这个共工作目录还有一个神奇的地方就是， 你可以创建不同的 branch（你默认工作在 master 下）， 当你切换不同的 branch 时， 你的工作目录（工程目录）里的所有文件都会变成当前 branch 对应的文件。 这个不展开了。")])])])],1)}),[],!1,null,null,null);_.default=i.exports}}]);